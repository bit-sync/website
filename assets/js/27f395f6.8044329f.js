"use strict";(self.webpackChunkbit_sync_web=self.webpackChunkbit_sync_web||[]).push([[5557],{4008:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"echo-kernel/System/port-io","title":"Port I/O System","description":"The Echo Kernel implements a robust port I/O system for direct hardware communication. This system provides low-level access to hardware ports while maintaining type safety and code clarity.","source":"@site/docs/echo-kernel/System/port-io.mdx","sourceDirName":"echo-kernel/System","slug":"/echo-kernel/System/port-io","permalink":"/docs/echo-kernel/System/port-io","draft":false,"unlisted":false,"editUrl":"https://github.com/bit-sync/website/blob/main/docs/echo-kernel/System/port-io.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/docs/echo-kernel/api-reference"},"next":{"title":"Branding","permalink":"/docs/branding"}}');var i=n(4848),r=n(8453);const o={},a="Port I/O System",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Port I/O Functions",id:"port-io-functions",level:2},{value:"Output Operations",id:"output-operations",level:3},{value:"Input Operations",id:"input-operations",level:3},{value:"Hardware Port Constants",id:"hardware-port-constants",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"System Shutdown",id:"system-shutdown",level:3},{value:"Implementation Details",id:"implementation-details",level:2},{value:"Assembly Constraints",id:"assembly-constraints",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Safety Considerations",id:"safety-considerations",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"port-io-system",children:"Port I/O System"})}),"\n",(0,i.jsx)(t.p,{children:"The Echo Kernel implements a robust port I/O system for direct hardware communication. This system provides low-level access to hardware ports while maintaining type safety and code clarity."}),"\n",(0,i.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(t.p,{children:["The port I/O system is implemented in ",(0,i.jsx)(t.code,{children:"src/sys/ports.h"})," and provides inline assembly functions for reading from and writing to hardware ports. The system supports both 8-bit and 16-bit operations."]}),"\n",(0,i.jsx)(t.h2,{id:"port-io-functions",children:"Port I/O Functions"}),"\n",(0,i.jsx)(t.h3,{id:"output-operations",children:"Output Operations"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"static inline void outb(uint16_t port, uint8_t value)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Writes an 8-bit value to the specified port."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"static inline void outw(uint16_t port, uint16_t value)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Writes a 16-bit value to the specified port."}),"\n",(0,i.jsx)(t.h3,{id:"input-operations",children:"Input Operations"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"static inline uint8_t inb(uint16_t port)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Reads an 8-bit value from the specified port."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"static inline uint16_t inw(uint16_t port)\n"})}),"\n",(0,i.jsx)(t.p,{children:"Reads a 16-bit value from the specified port."}),"\n",(0,i.jsx)(t.h2,{id:"hardware-port-constants",children:"Hardware Port Constants"}),"\n",(0,i.jsx)(t.p,{children:"The system defines several important port addresses as constants:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"static constexpr uint16_t QEMU_SHUTDOWN_PORT = 0xB004;  // QEMU-specific ACPI shutdown\nstatic constexpr uint16_t APM_SHUTDOWN_PORT = 0x604;    // APM power management\nstatic constexpr uint16_t ACPI_SHUTDOWN_PORT = 0x4004;  // Standard ACPI\nstatic constexpr uint16_t KBC_RESET_PORT = 0x64;        // Keyboard controller\n"})}),"\n",(0,i.jsx)(t.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,i.jsx)(t.h3,{id:"system-shutdown",children:"System Shutdown"}),"\n",(0,i.jsx)(t.p,{children:"The kernel implements a robust shutdown mechanism that tries multiple methods:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"// Try QEMU ACPI shutdown\noutw(QEMU_SHUTDOWN_PORT, 0x2000);\n\n// Try APM shutdown\noutw(APM_SHUTDOWN_PORT, 0x2000);\n\n// Try standard ACPI shutdown\noutw(ACPI_SHUTDOWN_PORT, 0x3400);\n\n// Try keyboard controller reset\noutb(KBC_RESET_PORT, 0xFE);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(t.p,{children:"The port I/O functions are implemented using inline assembly for direct hardware access:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'static inline void outb(uint16_t port, uint8_t value) {\n    asm volatile("outb %0, %1" : : "a"(value), "Nd"(port));\n}\n\nstatic inline uint8_t inb(uint16_t port) {\n    uint8_t ret;\n    asm volatile("inb %1, %0" : "=a"(ret) : "Nd"(port));\n    return ret;\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"assembly-constraints",children:"Assembly Constraints"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:'"a"'}),": Uses the AL/AX/EAX register for the value"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:'"Nd"'}),": Uses an immediate value or DX register for the port"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"volatile"}),": Prevents the compiler from reordering the instruction"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Always use the defined constants for port addresses"}),"\n",(0,i.jsx)(t.li,{children:"Check hardware documentation for correct port values"}),"\n",(0,i.jsx)(t.li,{children:"Handle potential hardware failures gracefully"}),"\n",(0,i.jsx)(t.li,{children:"Use the appropriate bit width for port operations"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"safety-considerations",children:"Safety Considerations"}),"\n",(0,i.jsx)(t.p,{children:"Port I/O operations are privileged instructions that can only be executed in kernel mode. Incorrect port operations can cause system instability or hardware damage. Always verify port addresses and values against hardware documentation."})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);